CAESAR CIPHER
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
void decrypt(char arr[])
{
int i;
for(i = 0; i < strlen(arr); i++)
{
arr[i] = arr[i] + 10;
}
}
void encrypt(char arr[])
{
int i;
for(i = 0; i < strlen(arr); i++)
{
arr[i] = arr[i] - 10;
}
}
int main()
{
char password[40];
int ch;
printf("Enter a Password:\t");
scanf("%s", password);
printf("\nPassword:\t%s\n",password);
encrypt(password);
printf("\nEncrypted Password:\t%s\n", password);
decrypt(password);
printf("\nDecrypted Password:\t%s\n", password);
return 0;
}
 VIGENERE CIPHER
#include<stdio.h>
#include<string.h>
int main(){
char msg[] = "THECRAZYPROGRAMMER";
char key[] = "HELLO";
int msgLen = strlen(msg), keyLen = strlen(key), i, j;
char newKey[msgLen], encryptedMsg[msgLen], decryptedMsg[msgLen];
for(i = 0, j = 0; i < msgLen; ++i, ++j){
if(j == keyLen)
j = 0;
newKey[i] = key[j];
}
newKey[i] = '\0';
for(i = 0; i < msgLen; ++i)
encryptedMsg[i] = ((msg[i] + newKey[i]) % 26) + 'A';
encryptedMsg[i] = '\0';
for(i = 0; i < msgLen; ++i)
decryptedMsg[i] = (((encryptedMsg[i] - newKey[i]) + 26) % 26) + 'A';
decryptedMsg[i] = '\0';
printf("Original Message: %s\n", msg);
printf("Key: %s\n", key);
printf("New Generated Key: %s\n", newKey);
printf("Encrypted Message: %s\n", encryptedMsg);
printf("Decrypted Message: %s\n", decryptedMsg);
return 0;
}
RAIL FENCE
#include<stdio.h>
#include<string.h>
void main()
{
int i,j,k,l;
char a[20],c[20],d[20];
printf("\n\t\t RAIL FENCE TECHNIQUE");
printf("\n\nEnter the input string : ");
gets(a);
l=strlen(a);
/*Ciphering*/
for(i=0,j=0;i<l;i++)
{
if(i%2==0)
c[j++]=a[i];
}
for(i=0;i<l;i++)
{
if(i%2==1)
c[j++]=a[i];
}
c[j]='\0';
printf("\nCipher text after applying rail fence :");
printf("\n%s",c);
/*Deciphering*/
if(l%2==0)
k=l/2;
else
k=(l/2)+1;
for(i=0,j=0;i<k;i++)
{
d[j]=c[i];
j=j+2;
}
for(i=k,j=1;i<l;i++)
{
d[j]=c[i];
j=j+2;
}
d[l]='\0';
printf("\nText after decryption : ");
printf("%s",d);
}
SHA-1 hash value
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
public class Main {
public static String encryptThisString(String input)
{
try {
MessageDigest md = MessageDigest.getInstance("SHA-1");
byte[] messageDigest = md.digest(input.getBytes());
BigInteger no = new BigInteger(1, messageDigest);
String hashtext = no.toString(16);
while (hashtext.length() < 32) {
hashtext = "0" + hashtext;
}
return hashtext;
}
catch (NoSuchAlgorithmException e) {
throw new RuntimeException(e);
}
}
public static void main(String args[]) throws
NoSuchAlgorithmException
{
System.out.println("HashCode Generated by SHA-1 for: ");
String s1 = "GeeksForGeeks";
System.out.println("\n" + s1 + " : " + encryptThisString(s1));
String s2 = "hello world";
System.out.println("\n" + s2 + " : " + encryptThisString(s2));
}
}
Diffe-Hellman
#include <stdio.h>
int compute(int a, int m, int n)
{
int r;
int y = 1;
while (m > 0)
{
r = m % 2;
if (r == 1) {
y = (y*a) % n;
}
a = a*a % n;
m = m / 2;
}
return y;
}
int main()
{
int p = 23;
int g = 5;
int a, b;
int A, B;
a = 6;
A = compute(g, a, p);
b = 15;
B = compute(g, b, p);
int keyA = compute(B, a, p);
int keyB = compute(A, b, p);
printf("Alice's secret key is %d\nBob's secret key is %d", keyA, keyB);
return 0;
}